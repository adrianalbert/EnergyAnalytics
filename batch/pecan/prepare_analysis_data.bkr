{
    "beaker": "2",
    "evaluators": [
        {
            "name": "Html",
            "plugin": "Html",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "Latex",
            "plugin": "Latex",
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "jsSetting2": "",
            "jsSetting1": "",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            }
        },
        {
            "name": "R",
            "plugin": "R",
            "view": {
                "cm": {
                    "mode": "r"
                }
            }
        },
        {
            "name": "",
            "plugin": "IPython",
            "imports": "",
            "supplementalClassPath": ""
        }
    ],
    "cells": [
        {
            "id": "sectionJuJ346",
            "type": "section",
            "title": "Run Thermal Profiles<br>",
            "level": 1,
            "evaluatorReader": false,
            "collapsed": false,
            "initialization": true
        },
        {
            "id": "sectionkokpi1",
            "type": "section",
            "title": "Learn thermal models&nbsp;",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false,
            "initialization": true
        },
        {
            "id": "textJZsj2P",
            "type": "text",
            "body": [
                "First, let's learn thermal<span style=\"line-height: 1.42857;\">&nbsp;profile models for each consumer in the dataset.</span>"
            ],
            "evaluatorReader": false
        },
        {
            "id": "section5uF9Fq",
            "type": "section",
            "title": "Initializations<br>",
            "level": 3,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codetgw59P",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "# __________________________________________________",
                    "# Initialize external dependencies...",
                    "",
                    "rm(list = ls())",
                    "options(error = recover)",
                    "",
                    "library('segmented')",
                    "library('lubridate')",
                    "",
                    "setwd('~/EnergyAnalytics/thermal_profiles/profiler/')",
                    "source('stateProcessorWrapper.r')",
                    "source('stateVisualizerWrapper.r')",
                    "source('../../batch/pecan/define_categories_pecan.r')",
                    "source('../../utils/select_data.r')"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "err",
                            "value": "Loading required package: lmtest\ndummies-1.5.6 provided by Decision Patterns\n\nLoading required package: lmtest\n"
                        }
                    ],
                    "payload": "",
                    "status": "FINISHED"
                },
                "selectedType": "Results",
                "pluginName": "R",
                "shellId": "99483a2d-3322-4175-ab60-db26a125cec9",
                "elapsedTime": 591
            },
            "evaluatorReader": true,
            "lineCount": 14
        },
        {
            "id": "code47owI8",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "DATA_PATH = '~/energy-data/pecan_street/usage-select/'",
                    "DUMP_PATH = '~/energy-data/pecan_street/models_new/'",
                    "PLOT_PATH = '~/Dropbox/OccupancyStates/plots/pecan-street-new/'",
                    "SELECTED_SEASONS = c('Summer', 'Winter')"
                ]
            },
            "output": {
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 4
        },
        {
            "id": "code9qoDjG",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "# load user names",
                    "user_names = read.csv('~/S3L_server/energy-data/pecan_street/metadata/user_names_ids.csv')"
                ]
            },
            "output": {
                "state": {},
                "result": "",
                "selectedType": "Hidden",
                "pluginName": "R",
                "shellId": "99483a2d-3322-4175-ab60-db26a125cec9",
                "elapsedTime": 27
            },
            "evaluatorReader": true,
            "lineCount": 2
        },
        {
            "id": "codePacdhM",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "# function to format data in the way it's expected by the HMM package",
                    "format_data = function(homeData) {",
                    "  ",
                    "  # temperature above reference",
                    "  homeData$TemperatureD = homeData$TemperatureF - 65",
                    "  ",
                    "  # remove observations with NAs in response",
                    "  idx.na = is.na(homeData$use)",
                    "  if (length(idx.na)>0) homeData = homeData[-idx.na,]",
                    "  ",
                    "  # format data as expected by the HMM package",
                    "  cur_data = subset(homeData, select = c('date', 'use'))",
                    "  names(cur_data)[2] = 'obs'",
                    "  cur_data$date = as.character(cur_data$date)",
                    "  cur_covar = subset(homeData, select = c('date', 'TemperatureF', 'TemperatureD'))",
                    "  cur_covar$date = as.character(cur_covar$date)",
                    "  cur_month     = month(cur_data$date)",
                    "  cur_covar$TemperatureDWinter = cur_covar$TemperatureD * (cur_month %in% c(0,1,2,3,10,11,12))",
                    "    ",
                    "  return(list(cur_data, cur_covar))",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "result": "",
                "selectedType": "Hidden",
                "pluginName": "R",
                "shellId": "99483a2d-3322-4175-ab60-db26a125cec9",
                "elapsedTime": 38
            },
            "evaluatorReader": true,
            "lineCount": 21
        },
        {
            "id": "codeAMJy3G",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "apply_thermal_model = function(cur_data, cur_covar, userName, ",
                    "                               dump_path = NULL, ",
                    "                               plot_path = NULL,",
                    "                               train.frac = 0.9) {",
                    "  ",
                    "  nTrain   = trunc(nrow(cur_data) * train.frac)",
                    "  ",
                    "  # define model learning controls",
                    "  controls = list(",
                    "    Kmin = 4, Kmax = 4, ",
                    "    maxit = 50, nRestarts = 5, tol = 1e-6,",
                    "    thresh.R2 = 0.85, thresh.MAPE = 0.10,",
                    "    test.periods = 12,",
                    "    vis.interval = 3 * 24",
                    "  )",
                    "  ",
                    "  # generate visualization interval; make sure there's data in there",
                    "  # TODO: there was an error generated here (indices for subsetting were messed up)",
                    "  ok = FALSE",
                    "  no.secs    = controls$vis.interval * 3600",
                    "  while (!ok) {",
                    "    idx_start  = 1",
                    "    idx_end    = max(nrow(cur_data)-controls$vis.interval-1, 1)",
                    "    start_date = sample(cur_data$date[idx_start:idx_end], 1)",
                    "    stop_date  = as.character(as.POSIXct(start_date) + no.secs)",
                    "    dat        = subset(cur_data, date >= start_date & date < stop_date)",
                    "    if (nrow(na.omit(dat)) > 0) ",
                    "      ok = TRUE",
                    "  }        ",
                    "  ",
                    "  # learn model",
                    "  ",
                    "  res = try(stateProcessorWrapper(cur_data, cur_covar, userName, ",
                    "                              controls = controls,",
                    "                              train.frac = train.frac, ",
                    "                              verbose = F, ",
                    "                              resp.vars = c('(Intercept)', 'TemperatureD', 'TemperatureDWinter'),",
                    "                              dump_path = dump_path))",
                    "  if (class(res) == 'try-error') {",
                    "    cat('Error in learning model for current user!\\n')",
                    "    return(NULL)",
                    "  }",
                    "  ",
                    "  # produce visualizations",
                    "  if (is.null(plot_path)) return(NULL)",
                    "  res = try(stateVisualizerWrapper(res$decoder, ",
                    "                               res$interpreter, ",
                    "                               plots_path = plot_path, ",
                    "                               interval = c(start_date, stop_date)))",
                    "  if (class(res) == 'try-error') {",
                    "    cat('Error in visualizing current user!\\n')",
                    "    return(NULL)",
                    "  }",
                    "  ",
                    "  return(NULL)",
                    "}",
                    ""
                ]
            },
            "output": {
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 57
        },
        {
            "id": "section5dXKWl",
            "type": "section",
            "title": "Learn models for each consumer",
            "level": 3,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codemStvYO",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    ""
                ]
            },
            "output": {
                "state": {}
            },
            "evaluatorReader": true
        }
    ],
    "namespace": {}
}
